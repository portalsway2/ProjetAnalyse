/** IMPORTANT: This file is AUTO GENERATED by https://github.com/zolotov/sass_stubs_creator */

/**
 * Creates a {Color} object from red, green, and blue values.
 *
 * @param red [Number]
 * A number between 0 and 255 inclusive,
 * or between 0% and 100% inclusive
 * @param green [Number]
 * A number between 0 and 255 inclusive,
 * or between 0% and 100% inclusive
 * @param blue [Number]
 * A number between 0 and 255 inclusive,
 * or between 0% and 100% inclusive
 * @see #rgba
 * @return [Color]
 */
@function rgb($red, $green, $blue) { /* stub */ }

/**
 * @see #rgb
 * @overload rgba(red, green, blue, alpha)
 * Creates a {Color} object from red, green, and blue values,
 * as well as an alpha channel indicating opacity.
 *
 * @param red [Number]
 * A number between 0 and 255 inclusive
 * @param green [Number]
 * A number between 0 and 255 inclusive
 * @param blue [Number]
 * A number between 0 and 255 inclusive
 * @param alpha [Number]
 * A number between 0 and 1
 * @return [Color]
 *
 * @overload rgba(color, alpha)
 * Sets the opacity of a color.
 *
 * @example
 * rgba(#102030, 0.5) => rgba(16, 32, 48, 0.5)
 * rgba(blue, 0.2)    => rgba(0, 0, 255, 0.2)
 *
 * @param color [Color]
 * @param alpha [Number]
 * A number between 0 and 1
 * @return [Color]
 */
@function rgba($args...) { /* stub */ }

/**
 * Creates a {Color} object from hue, saturation, and lightness.
 * Uses the algorithm from the [CSS3 spec](http://www.w3.org/TR/css3-color/#hsl-color).
 *
 * @param hue [Number] The hue of the color.
 * Should be between 0 and 360 degrees, inclusive
 * @param saturation [Number] The saturation of the color.
 * Must be between `0%` and `100%`, inclusive
 * @param lightness [Number] The lightness of the color.
 * Must be between `0%` and `100%`, inclusive
 * @return [Color] The resulting color
 * @see #hsla
 * @raise [ArgumentError] if `saturation` or `lightness` are out of bounds
 */
@function hsl($hue, $saturation, $lightness) { /* stub */ }

/**
 * Creates a {Color} object from hue, saturation, and lightness,
 * as well as an alpha channel indicating opacity.
 * Uses the algorithm from the [CSS3 spec](http://www.w3.org/TR/css3-color/#hsl-color).
 *
 * @param hue [Number] The hue of the color.
 * Should be between 0 and 360 degrees, inclusive
 * @param saturation [Number] The saturation of the color.
 * Must be between `0%` and `100%`, inclusive
 * @param lightness [Number] The lightness of the color.
 * Must be between `0%` and `100%`, inclusive
 * @param alpha [Number] The opacity of the color.
 * Must be between 0 and 1, inclusive
 * @return [Color] The resulting color
 * @see #hsl
 * @raise [ArgumentError] if `saturation`, `lightness`, or `alpha` are out of bounds
 */
@function hsla($hue, $saturation, $lightness, $alpha) { /* stub */ }

/**
 * Returns the red component of a color.
 *
 * @param color [Color]
 * @return [Number]
 * @raise [ArgumentError] If `color` isn't a color
 */
@function red($color) { /* stub */ }

/**
 * Returns the green component of a color.
 *
 * @param color [Color]
 * @return [Number]
 * @raise [ArgumentError] If `color` isn't a color
 */
@function green($color) { /* stub */ }

/**
 * Returns the blue component of a color.
 *
 * @param color [Color]
 * @return [Number]
 * @raise [ArgumentError] If `color` isn't a color
 */
@function blue($color) { /* stub */ }

/**
 * Returns the hue component of a color.
 *
 * See [the CSS3 HSL specification](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * Calculated from RGB where necessary via [this algorithm](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * @param color [Color]
 * @return [Number] between 0deg and 360deg
 * @see #adjust_hue
 * @raise [ArgumentError] if `color` isn't a color
 */
@function hue($color) { /* stub */ }

/**
 * Returns the saturation component of a color.
 *
 * See [the CSS3 HSL specification](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * Calculated from RGB where necessary via [this algorithm](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * @param color [Color]
 * @return [Number] between 0% and 100%
 * @see #saturate
 * @see #desaturate
 * @raise [ArgumentError] if `color` isn't a color
 */
@function saturation($color) { /* stub */ }

/**
 * Returns the hue component of a color.
 *
 * See [the CSS3 HSL specification](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * Calculated from RGB where necessary via [this algorithm](http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_RGB_to_HSL_or_HSV).
 *
 * @param color [Color]
 * @return [Number] between 0% and 100%
 * @see #lighten
 * @see #darken
 * @raise [ArgumentError] if `color` isn't a color
 */
@function lightness($color) { /* stub */ }

/**
 * Returns the alpha component (opacity) of a color.
 * This is 1 unless otherwise specified.
 *
 * This function also supports the proprietary Microsoft
 * `alpha(opacity=20)` syntax.
 *
 * @overload def alpha(color)
 * @param color [Color]
 * @return [Number]
 * @see #opacify
 * @see #transparentize
 * @raise [ArgumentError] If `color` isn't a color
 */
@function alpha($args...) { /* stub */ }

/**
 * Returns the alpha component (opacity) of a color.
 * This is 1 unless otherwise specified.
 *
 * @param color [Color]
 * @return [Number]
 * @see #opacify
 * @see #transparentize
 * @raise [ArgumentError] If `color` isn't a color
 */
@function opacity($color) { /* stub */ }

/**
 * Makes a color more opaque.
 * Takes a color and an amount between 0 and 1,
 * and returns a color with the opacity increased by that value.
 *
 * @example
 * opacify(rgba(0, 0, 0, 0.5), 0.1) => rgba(0, 0, 0, 0.6)
 * opacify(rgba(0, 0, 17, 0.8), 0.2) => #001
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #transparentize
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0 and 1
 */
@function opacify($color, $amount) { /* stub */ }

/**
 * Makes a color more transparent.
 * Takes a color and an amount between 0 and 1,
 * and returns a color with the opacity decreased by that value.
 *
 * @example
 * transparentize(rgba(0, 0, 0, 0.5), 0.1) => rgba(0, 0, 0, 0.4)
 * transparentize(rgba(0, 0, 0, 0.8), 0.2) => rgba(0, 0, 0, 0.6)
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #opacify
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0 and 1
 */
@function transparentize($color, $amount) { /* stub */ }

/**
 * Makes a color lighter.
 * Takes a color and an amount between 0% and 100%,
 * and returns a color with the lightness increased by that value.
 *
 * @example
 * lighten(hsl(0, 0%, 0%), 30%) => hsl(0, 0, 30)
 * lighten(#800, 20%) => #e00
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #darken
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0% and 100%
 */
@function lighten($color, $amount) { /* stub */ }

/**
 * Makes a color darker.
 * Takes a color and an amount between 0% and 100%,
 * and returns a color with the lightness decreased by that value.
 *
 * @example
 * darken(hsl(25, 100%, 80%), 30%) => hsl(25, 100%, 50%)
 * darken(#800, 20%) => #200
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #lighten
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0% and 100%
 */
@function darken($color, $amount) { /* stub */ }

/**
 * Makes a color more saturated.
 * Takes a color and an amount between 0% and 100%,
 * and returns a color with the saturation increased by that value.
 *
 * @example
 * saturate(hsl(120, 30%, 90%), 20%) => hsl(120, 50%, 90%)
 * saturate(#855, 20%) => #9e3f3f
 * @overload saturate(color, amount)
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #desaturate
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0% and 100%
 */
@function saturate($color, $amount) { /* stub */ }

/**
 * Makes a color less saturated.
 * Takes a color and an amount between 0% and 100%,
 * and returns a color with the saturation decreased by that value.
 *
 * @example
 * desaturate(hsl(120, 30%, 90%), 20%) => hsl(120, 10%, 90%)
 * desaturate(#855, 20%) => #726b6b
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @see #saturate
 * @raise [ArgumentError] If `color` isn't a color,
 * or `number` isn't a number between 0% and 100%
 */
@function desaturate($color, $amount) { /* stub */ }

/**
 * Changes the hue of a color while retaining the lightness and saturation.
 * Takes a color and a number of degrees (usually between -360deg and 360deg),
 * and returns a color with the hue rotated by that value.
 *
 * @example
 * adjust-hue(hsl(120, 30%, 90%), 60deg) => hsl(180, 30%, 90%)
 * adjust-hue(hsl(120, 30%, 90%), 060deg) => hsl(60, 30%, 90%)
 * adjust-hue(#811, 45deg) => #886a11
 * @param color [Color]
 * @param amount [Number]
 * @return [Color]
 * @raise [ArgumentError] If `color` isn't a color, or `number` isn't a number
 */
@function adjust_hue($color, $degrees) { /* stub */ }

/**
 * Returns an IE hex string for a color with an alpha channel
 * suitable for passing to IE filters.
 *
 * @example
 * ie-hex-str(#abc) => #FFAABBCC
 * ie-hex-str(#3322BB) => #FF3322BB
 * ie-hex-str(rgba(0, 255, 0, 0.5)) => #8000FF00
 * @param color [Color]
 * @return [String]
 * @raise [ArgumentError] If `color` isn't a color
 */
@function ie_hex_str($color) { /* stub */ }

/**
 * Adjusts one or more properties of a color.
 * This can change the red, green, blue, hue, saturation, value, and alpha properties.
 * The properties are specified as keyword arguments,
 * and are added to or subtracted from the color's current value for that property.
 *
 * `$red`, `$green`, and `$blue` properties should be between 0 and 255.
 * `$saturation` and `$lightness` should be between 0% and 100%.
 * `$alpha` should be between 0 and 1.
 *
 * All properties are optional.
 * You can't specify both RGB properties (`$red`, `$green`, `$blue`)
 * and HSL properties (`$hue`, `$saturation`, `$value`) at the same time.
 *
 * @example
 * adjust-color(#102030, $blue: 5) => #102035
 * adjust-color(#102030, $red: -5, $blue: 5) => #0b2035
 * adjust-color(hsl(25, 100%, 80%), $lightness: -30%, $alpha: -0.4) => hsla(25, 100%, 50%, 0.6)
 * @param color [Color]
 * @param red [Number]
 * @param green [Number]
 * @param blue [Number]
 * @param hue [Number]
 * @param saturation [Number]
 * @param lightness [Number]
 * @param alpha [Number]
 * @return [Color]
 * @raise [ArgumentError] if `color` is not a color,
 * if any keyword argument is not a number,
 * if any keyword argument is not in the legal range,
 * if an unexpected keyword argument is given,
 * or if both HSL and RGB properties are given.
 */
@function adjust_color($color, $kwargs) { /* stub */ }

/**
 * Scales one or more properties of a color by a percentage value.
 * Unlike \{#adjust_color adjust-color}, which changes a color's properties by fixed amounts,
 * \{#scale_color scale-color} fluidly changes them based on how high or low they already are.
 * That means that lightening an already-light color with \{#scale_color scale-color}
 * won't change the lightness much,
 * but lightening a dark color by the same amount will change it more dramatically.
 * This has the benefit of making `scale-color($color, ...)` have a similar effect
 * regardless of what `$color` is.
 *
 * For example, the lightness of a color can be anywhere between 0 and 100.
 * If `scale-color($color, $lightness: 40%)` is called, the resulting color's lightness
 * will be 40% of the way between its original lightness and 100.
 * If `scale-color($color, $lightness: -40%)` is called instead,
 * the lightness will be 40% of the way between the original and 0.
 *
 * This can change the red, green, blue, saturation, value, and alpha properties.
 * The properties are specified as keyword arguments.
 * All arguments should be percentages between 0% and 100%.
 *
 * All properties are optional.
 * You can't specify both RGB properties (`$red`, `$green`, `$blue`)
 * and HSL properties (`$saturation`, `$value`) at the same time.
 *
 * @example
 * scale-color(hsl(120, 70, 80), $lightness: 50%) => hsl(120, 70, 90)
 * scale-color(rgb(200, 150, 170), $green: -40%, $blue: 70%) => rgb(200, 90, 229)
 * scale-color(hsl(200, 70, 80), $saturation: -90%, $alpha: -30%) => hsla(200, 7, 80, 0.7)
 * @param color [Color]
 * @param red [Number]
 * @param green [Number]
 * @param blue [Number]
 * @param saturation [Number]
 * @param lightness [Number]
 * @param alpha [Number]
 * @return [Color]
 * @raise [ArgumentError] if `color` is not a color,
 * if any keyword argument is not a percentage between 0% and 100%,
 * if an unexpected keyword argument is given,
 * or if both HSL and RGB properties are given.
 */
@function scale_color($color, $kwargs) { /* stub */ }

/**
 * Changes one or more properties of a color.
 * This can change the red, green, blue, hue, saturation, value, and alpha properties.
 * The properties are specified as keyword arguments,
 * and replace the color's current value for that property.
 *
 * `$red`, `$green`, and `$blue` properties should be between 0 and 255.
 * `$saturation` and `$lightness` should be between 0% and 100%.
 * `$alpha` should be between 0 and 1.
 *
 * All properties are optional.
 * You can't specify both RGB properties (`$red`, `$green`, `$blue`)
 * and HSL properties (`$hue`, `$saturation`, `$value`) at the same time.
 *
 * @example
 * change-color(#102030, $blue: 5) => #102005
 * change-color(#102030, $red: 120, $blue: 5) => #782005
 * change-color(hsl(25, 100%, 80%), $lightness: 40%, $alpha: 0.8) => hsla(25, 100%, 40%, 0.8)
 * @param color [Color]
 * @param red [Number]
 * @param green [Number]
 * @param blue [Number]
 * @param hue [Number]
 * @param saturation [Number]
 * @param lightness [Number]
 * @param alpha [Number]
 * @return [Color]
 * @raise [ArgumentError] if `color` is not a color,
 * if any keyword argument is not a number,
 * if any keyword argument is not in the legal range,
 * if an unexpected keyword argument is given,
 * or if both HSL and RGB properties are given.
 */
@function change_color($color, $kwargs) { /* stub */ }

/**
 * Mixes together two colors.
 * Specifically, takes the average of each of the RGB components,
 * optionally weighted by the given percentage.
 * The opacity of the colors is also considered when weighting the components.
 *
 * The weight specifies the amount of the first color that should be included
 * in the returned color.
 * The default, 50%, means that half the first color
 * and half the second color should be used.
 * 25% means that a quarter of the first color
 * and three quarters of the second color should be used.
 *
 * @example
 * mix(#f00, #00f) => #7f007f
 * mix(#f00, #00f, 25%) => #3f00bf
 * mix(rgba(255, 0, 0, 0.5), #00f) => rgba(63, 0, 191, 0.75)
 * @overload mix(color1, color2, weight: 50%)
 * @param color1 [Color]
 * @param color2 [Color]
 * @param weight [Number] between 0% and 100%
 * @return [Color]
 * @raise [ArgumentError] if `color1` or `color2` aren't colors,
 * or `weight` isn't a number between 0% and 100%
 */
@function mix($color1, $color2, $weight) { /* stub */ }

/**
 * Converts a color to grayscale.
 * This is identical to `desaturate(color, 100%)`.
 *
 * @param color [Color]
 * @return [Color]
 * @raise [ArgumentError] if `color` isn't a color
 * @see #desaturate
 */
@function grayscale($color) { /* stub */ }

/**
 * Returns the complement of a color.
 * This is identical to `adjust-hue(color, 180deg)`.
 *
 * @param color [Color]
 * @return [Color]
 * @raise [ArgumentError] if `color` isn't a color
 * @see #adjust_hue #adjust-hue
 */
@function complement($color) { /* stub */ }

/**
 * Returns the inverse (negative) of a color.
 * The red, green, and blue values are inverted, while the opacity is left alone.
 *
 * @param color [Color]
 * @return [Color]
 * @raise [ArgumentError] if `color` isn't a color
 */
@function invert($color) { /* stub */ }

/**
 * Removes quotes from a string if the string is quoted,
 * or returns the same string if it's not.
 *
 * @param string [String]
 * @return [String]
 * @raise [ArgumentError] if `string` isn't a string
 * @see #quote
 * @example
 * unquote("foo") => foo
 * unquote(foo) => foo
 */
@function unquote($string) { /* stub */ }

/**
 * Add quotes to a string if the string isn't quoted,
 * or returns the same string if it is.
 *
 * @param string [String]
 * @return [String]
 * @raise [ArgumentError] if `string` isn't a string
 * @see #unquote
 * @example
 * quote("foo") => "foo"
 * quote(foo) => "foo"
 */
@function quote($string) { /* stub */ }

/**
 * Inspects the type of the argument, returning it as an unquoted string.
 *
 * @example
 * type-of(100px)  => number
 * type-of(asdf)   => string
 * type-of("asdf") => string
 * type-of(true)   => bool
 * type-of(#fff)   => color
 * type-of(blue)   => color
 * @param value [Literal] The object to inspect
 * @return [String] The unquoted string name of the literal's type
 */
@function type_of($value) { /* stub */ }

/**
 * Inspects the unit of the number, returning it as a quoted string.
 * Complex units are sorted in alphabetical order by numerator and denominator.
 *
 * @example
 * unit(100) => ""
 * unit(100px) => "px"
 * unit(3em) => "em"
 * unit(10px * 5em) => "em*px"
 * unit(10px * 5em / 30cm / 1rem) => "em*px/cm*rem"
 * @param number [Literal] The number to inspect
 * @return [String] The unit(s) of the number
 * @raise [ArgumentError] if `number` isn't a number
 */
@function unit($number) { /* stub */ }

/**
 * Inspects the unit of the number, returning a boolean indicating if it is unitless.
 *
 * @example
 * unitless(100) => true
 * unitless(100px) => false
 * @param number [Literal] The number to inspect
 * @return [Bool] Whether or not the number is unitless
 * @raise [ArgumentError] if `number` isn't a number
 */
@function unitless($number) { /* stub */ }

/**
 * Returns true if two numbers are similar enough to be added, subtracted, or compared.
 *
 * @example
 * comparable(2px, 1px) => true
 * comparable(100px, 3em) => false
 * comparable(10cm, 3mm) => true
 * @param number_1 [Number]
 * @param number_2 [Number]
 * @return [Bool] indicating if the numbers can be compared.
 * @raise [ArgumentError] if `number_1` or `number_2` aren't numbers
 */
@function comparable($number_1, $number_2) { /* stub */ }

/**
 * Converts a decimal number to a percentage.
 *
 * @example
 * percentage(100px / 50px) => 200%
 * @param value [Number] The decimal number to convert to a percentage
 * @return [Number] The percentage
 * @raise [ArgumentError] If `value` isn't a unitless number
 */
@function percentage($value) { /* stub */ }

/**
 * Rounds a number to the nearest whole number.
 *
 * @example
 * round(10.4px) => 10px
 * round(10.6px) => 11px
 * @param value [Number] The number
 * @return [Number] The rounded number
 * @raise [ArgumentError] if `value` isn't a number
 */
@function round($value) { /* stub */ }

/**
 * Rounds a number up to the nearest whole number.
 *
 * @example
 * ceil(10.4px) => 11px
 * ceil(10.6px) => 11px
 * @param value [Number] The number
 * @return [Number] The rounded number
 * @raise [ArgumentError] if `value` isn't a number
 */
@function ceil($value) { /* stub */ }

/**
 * Rounds down to the nearest whole number.
 *
 * @example
 * floor(10.4px) => 10px
 * floor(10.6px) => 10px
 * @param value [Number] The number
 * @return [Number] The rounded number
 * @raise [ArgumentError] if `value` isn't a number
 */
@function floor($value) { /* stub */ }

/**
 * Finds the absolute value of a number.
 *
 * @example
 * abs(10px) => 10px
 * abs(-10px) => 10px
 * @param value [Number] The number
 * @return [Number] The absolute value
 * @raise [ArgumentError] if `value` isn't a number
 */
@function abs($value) { /* stub */ }

/**
 * Finds the minimum of several values. This function takes any number of
 * arguments.
 *
 * @example
 * min(1px, 4px) => 1px
 * min(5em, 3em, 4em) => 3em
 * @param values [[Number]] The numbers
 * @return [Number] The minimum value
 * @raise [ArgumentError] if any argument isn't a number, or if not all of
 * the arguments have comparable units
 */
@function min($values...) { /* stub */ }

/**
 * Finds the maximum of several values. This function takes any number of
 * arguments.
 *
 * @example
 * max(1px, 4px) => 1px
 * max(5em, 3em, 4em) => 3em
 * @return [Number] The maximum value
 * @raise [ArgumentError] if any argument isn't a number, or if not all of
 * the arguments have comparable units
 */
@function max($values...) { /* stub */ }

/**
 * Return the length of a list.
 *
 * @example
 * length(10px) => 1
 * length(10px 20px 30px) => 3
 * @param list [Literal] The list
 * @return [Number] The length
 */
@function length($list) { /* stub */ }

/**
 * Gets the nth item in a list.
 *
 * Note that unlike some languages, the first item in a Sass list is number 1,
 * the second number 2, and so forth.
 *
 * @example
 * nth(10px 20px 30px, 1) => 10px
 * nth((Helvetica, Arial, sans-serif), 3) => sans-serif
 * @param list [Literal] The list
 * @param n [Number] The index into the list
 * @return [Literal] The nth item in the list
 * @raise [ArgumentError] If `n` isn't an integer between 1 and the list's length.
 */
@function nth($list, $n) { /* stub */ }

/**
 * Joins together two lists into a new list.
 *
 * Unless the `$separator` argument is passed,
 * if one list is comma-separated and one is space-separated,
 * the first parameter's separator is used for the resulting list.
 * If the lists have only one item each, spaces are used for the resulting list.
 *
 * @example
 * join(10px 20px, 30px 40px) => 10px 20px 30px 40px
 * join((blue, red), (#abc, #def)) => blue, red, #abc, #def
 * join(10px, 20px) => 10px 20px
 * join(10px, 20px, comma) => 10px, 20px
 * join((blue, red), (#abc, #def), space) => blue red #abc #def
 * @overload join(list1, list2, separator: auto)
 * @param list1 [Literal] The first list to join
 * @param list2 [Literal] The second list to join
 * @param separator [String] How the list separator (comma or space) should be determined.
 * If this is `comma` or `space`, that is always the separator;
 * if this is `auto` (the default), the separator is determined as explained above.
 */
@function join($list1, $list2, $separator) { /* stub */ }

/**
 * Appends a single value onto the end of a list.
 *
 * Unless the `$separator` argument is passed,
 * if the list has only one item,
 * the resulting list will be space-separated.
 *
 * @example
 * append(10px 20px, 30px) => 10px 20px 30px
 * append((blue, red), green) => blue, red, green
 * append(10px 20px, 30px 40px) => 10px 20px (30px 40px)
 * append(10px, 20px, comma) => 10px, 20px
 * append((blue, red), green, space) => blue red green
 * @overload append(list, val, separator: auto)
 * @param list [Literal] The list to add the value to
 * @param val [Literal] The value to add to the end of the list
 * @param separator [String] How the list separator (comma or space) should be determined.
 * If this is `comma` or `space`, that is always the separator;
 * if this is `auto` (the default), the separator is the same as that used by the list.
 */
@function append($list, $val, $separator) { /* stub */ }

/**
 * Combines several lists into a single comma separated list, where the nth
 * value is a space separated list of the source lists' nth values.
 *
 * The length of the resulting list is the length of the
 * shortest list.
 *
 * @example
 * zip(1px 1px 3px, solid dashed solid, red green blue)
 * => 1px solid red, 1px dashed green, 3px solid blue
 */
@function zip($lists...) { /* stub */ }

/**
 * Returns the position of a value within a list. If not found, returns
 * false.
 *
 * @example
 * index(1px solid red, solid) => 2
 * index(1px solid red, dashed) => false
 */
@function index($list, $value) { /* stub */ }

/**
 * Returns one of two values based on the truth value of the first argument.
 *
 * @example
 * if(true, 1px, 2px) => 1px
 * if(false, 1px, 2px) => 2px
 * @param condition [Bool] Whether the first or second value will be returned.
 * @param if_true [Literal] The value that will be returned if `$condition` is true.
 * @param if_false [Literal] The value that will be returned if `$condition` is false.
 */
@function if($condition, $if_true, $if_false) { /* stub */ }